/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace HashTimeLockContract {
  export type LockInfoStruct = {
    seller: AddressLike;
    buyer: AddressLike;
    registry: AddressLike;
    amount: BigNumberish;
    transactionID: BytesLike;
    paymentID: BytesLike;
    signature: BytesLike;
    hashlock: BytesLike;
    hashRelease: BytesLike;
    hashCancel: BytesLike;
    paymentDate: BigNumberish;
    deliveryDate: BigNumberish;
  };

  export type LockInfoStructOutput = [
    seller: string,
    buyer: string,
    registry: string,
    amount: bigint,
    transactionID: string,
    paymentID: string,
    signature: string,
    hashlock: string,
    hashRelease: string,
    hashCancel: string,
    paymentDate: bigint,
    deliveryDate: bigint
  ] & {
    seller: string;
    buyer: string;
    registry: string;
    amount: bigint;
    transactionID: string;
    paymentID: string;
    signature: string;
    hashlock: string;
    hashRelease: string;
    hashCancel: string;
    paymentDate: bigint;
    deliveryDate: bigint;
  };
}

export interface HashTimeLockContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "artifacts"
      | "confirmLock"
      | "currentStatus"
      | "forceCancel"
      | "forceRelease"
      | "lock"
      | "release"
      | "setLock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetLocked"
      | "AssetReleased"
      | "LockCancelled"
      | "LockSet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "artifacts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceCancel",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRelease",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLock",
    values: [HashTimeLockContract.LockInfoStruct]
  ): string;

  decodeFunctionResult(functionFragment: "artifacts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLock", data: BytesLike): Result;
}

export namespace AssetLockedEvent {
  export type InputTuple = [
    transactionID: BytesLike,
    paymentID: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    transactionID: string,
    paymentID: string,
    status: bigint
  ];
  export interface OutputObject {
    transactionID: string;
    paymentID: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetReleasedEvent {
  export type InputTuple = [
    transactionID: BytesLike,
    paymentID: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    transactionID: string,
    paymentID: string,
    status: bigint
  ];
  export interface OutputObject {
    transactionID: string;
    paymentID: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockCancelledEvent {
  export type InputTuple = [
    transactionID: BytesLike,
    paymentID: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    transactionID: string,
    paymentID: string,
    status: bigint
  ];
  export interface OutputObject {
    transactionID: string;
    paymentID: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockSetEvent {
  export type InputTuple = [
    transactionID: BytesLike,
    paymentID: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    transactionID: string,
    paymentID: string,
    status: bigint
  ];
  export interface OutputObject {
    transactionID: string;
    paymentID: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HashTimeLockContract extends BaseContract {
  connect(runner?: ContractRunner | null): HashTimeLockContract;
  waitForDeployment(): Promise<this>;

  interface: HashTimeLockContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  artifacts: TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        paymentProof: string;
        secret: string;
        secretRelease: string;
        secretCancel: string;
      }
    ],
    "view"
  >;

  confirmLock: TypedContractMethod<[], [void], "nonpayable">;

  currentStatus: TypedContractMethod<[], [bigint], "view">;

  forceCancel: TypedContractMethod<
    [_secretCancel: BytesLike, _paymentProof: BytesLike],
    [void],
    "nonpayable"
  >;

  forceRelease: TypedContractMethod<
    [_secretRelease: BytesLike, _paymentProof: BytesLike],
    [void],
    "nonpayable"
  >;

  lock: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        seller: string;
        buyer: string;
        registry: string;
        amount: bigint;
        transactionID: string;
        paymentID: string;
        signature: string;
        hashlock: string;
        hashRelease: string;
        hashCancel: string;
        paymentDate: bigint;
        deliveryDate: bigint;
      }
    ],
    "view"
  >;

  release: TypedContractMethod<
    [_secret: BytesLike, _paymentProof: BytesLike],
    [void],
    "nonpayable"
  >;

  setLock: TypedContractMethod<
    [_lockInfo: HashTimeLockContract.LockInfoStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "artifacts"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        paymentProof: string;
        secret: string;
        secretRelease: string;
        secretCancel: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "confirmLock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentStatus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceCancel"
  ): TypedContractMethod<
    [_secretCancel: BytesLike, _paymentProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceRelease"
  ): TypedContractMethod<
    [_secretRelease: BytesLike, _paymentProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        seller: string;
        buyer: string;
        registry: string;
        amount: bigint;
        transactionID: string;
        paymentID: string;
        signature: string;
        hashlock: string;
        hashRelease: string;
        hashCancel: string;
        paymentDate: bigint;
        deliveryDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<
    [_secret: BytesLike, _paymentProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLock"
  ): TypedContractMethod<
    [_lockInfo: HashTimeLockContract.LockInfoStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetLocked"
  ): TypedContractEvent<
    AssetLockedEvent.InputTuple,
    AssetLockedEvent.OutputTuple,
    AssetLockedEvent.OutputObject
  >;
  getEvent(
    key: "AssetReleased"
  ): TypedContractEvent<
    AssetReleasedEvent.InputTuple,
    AssetReleasedEvent.OutputTuple,
    AssetReleasedEvent.OutputObject
  >;
  getEvent(
    key: "LockCancelled"
  ): TypedContractEvent<
    LockCancelledEvent.InputTuple,
    LockCancelledEvent.OutputTuple,
    LockCancelledEvent.OutputObject
  >;
  getEvent(
    key: "LockSet"
  ): TypedContractEvent<
    LockSetEvent.InputTuple,
    LockSetEvent.OutputTuple,
    LockSetEvent.OutputObject
  >;

  filters: {
    "AssetLocked(bytes32,bytes32,uint8)": TypedContractEvent<
      AssetLockedEvent.InputTuple,
      AssetLockedEvent.OutputTuple,
      AssetLockedEvent.OutputObject
    >;
    AssetLocked: TypedContractEvent<
      AssetLockedEvent.InputTuple,
      AssetLockedEvent.OutputTuple,
      AssetLockedEvent.OutputObject
    >;

    "AssetReleased(bytes32,bytes32,uint8)": TypedContractEvent<
      AssetReleasedEvent.InputTuple,
      AssetReleasedEvent.OutputTuple,
      AssetReleasedEvent.OutputObject
    >;
    AssetReleased: TypedContractEvent<
      AssetReleasedEvent.InputTuple,
      AssetReleasedEvent.OutputTuple,
      AssetReleasedEvent.OutputObject
    >;

    "LockCancelled(bytes32,bytes32,uint8)": TypedContractEvent<
      LockCancelledEvent.InputTuple,
      LockCancelledEvent.OutputTuple,
      LockCancelledEvent.OutputObject
    >;
    LockCancelled: TypedContractEvent<
      LockCancelledEvent.InputTuple,
      LockCancelledEvent.OutputTuple,
      LockCancelledEvent.OutputObject
    >;

    "LockSet(bytes32,bytes32,uint8)": TypedContractEvent<
      LockSetEvent.InputTuple,
      LockSetEvent.OutputTuple,
      LockSetEvent.OutputObject
    >;
    LockSet: TypedContractEvent<
      LockSetEvent.InputTuple,
      LockSetEvent.OutputTuple,
      LockSetEvent.OutputObject
    >;
  };
}
