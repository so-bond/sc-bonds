/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  BilateralTrade,
  BilateralTradeInterface,
} from "../../src/BilateralTrade";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IRegister",
        name: "_register",
        type: "address",
      },
      {
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "enum ITrade.Status",
        name: "status",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "NotifyTrade",
    type: "event",
  },
  {
    inputs: [],
    name: "approve",
    outputs: [
      {
        internalType: "enum ITrade.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "buyerAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "details",
    outputs: [
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tradeDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "valueDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "executeTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDetails",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tradeDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "valueDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct ITrade.TradeDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paymentID",
    outputs: [
      {
        internalType: "bytes8",
        name: "",
        type: "bytes8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "register",
    outputs: [
      {
        internalType: "contract IRegister",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sellerAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tradeDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "valueDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct ITrade.TradeDetail",
        name: "_details",
        type: "tuple",
      },
    ],
    name: "setDetails",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "status",
    outputs: [
      {
        internalType: "enum ITrade.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620010d6380380620010d68339810160408190526200003491620002e7565b600160005560405163c41251a160e01b81523360048201526001600160a01b0383169063c41251a190602401602060405180830381865afa1580156200007e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a4919062000326565b806200011657506040516314aa469760e31b81523360048201526001600160a01b0383169063a55234b890602401602060405180830381865afa158015620000f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000116919062000326565b620001685760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d75737420626520612076616c696420696e766573746f720060448201526064015b60405180910390fd5b60405163c41251a160e01b81526001600160a01b03828116600483015283169063c41251a190602401602060405180830381865afa158015620001af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d5919062000326565b620002235760405162461bcd60e51b815260206004820152601e60248201527f4275796572206d75737420626520612076616c696420696e766573746f72000060448201526064016200015f565b60018054600280546001600160a01b03199081163317909155600480546001600160a01b03868116919093161790556001600160a81b0319909116908416179081905560ff600160a01b90910416600581111562000285576200028562000351565b604051600081526001600160a01b0383169033907fb04efa95c2e317d8afba4237350a971f1ce59ef6fbbf2eb3f1a7e3f3f106a8f49060200160405180910390a4505062000367565b6001600160a01b0381168114620002e457600080fd5b50565b60008060408385031215620002fb57600080fd5b82516200030881620002ce565b60208401519092506200031b81620002ce565b809150509250929050565b6000602082840312156200033957600080fd5b815180151581146200034a57600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b610d5f80620003776000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634dc415de116100715780634dc415de1461012b578063565974d314610135578063835d2d2e14610188578063b787cfe6146101a0578063d84ffb41146101b3578063fbbf93a0146101ce57600080fd5b806310547851146100ae57806312424e3f146100de5780631aa3a008146100f3578063200d2ed214610106578063489147d71461011a575b600080fd5b6002546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e661021c565b6040516100d59190610c25565b6001546100c1906001600160a01b031681565b6001546100e690600160a01b900460ff1681565b6004546001600160a01b03166100c1565b610133610471565b005b60035460045460055460065460075461015894936001600160a01b031692919085565b604080519586526001600160a01b039094166020860152928401919091526060830152608082015260a0016100d5565b610190610669565b60405190151581526020016100d5565b6101336101ae366004610c4d565b6108c7565b6040516001600160c01b03193060c01b1681526020016100d5565b6101d6610b3d565b6040516100d59190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b6002546000906001600160a01b03163314801561025657506000600154600160a01b900460ff16600581111561025457610254610c0f565b145b156103b8576003546102a65760405162461bcd60e51b81526020600482015260146024820152731c5d585b9d1a5d1e481b9bdd081919599a5b995960621b60448201526064015b60405180910390fd5b6005546102ee5760405162461bcd60e51b81526020600482015260166024820152751d1c9859194819185d19481b9bdd081919599a5b995960521b604482015260640161029d565b6006546103365760405162461bcd60e51b81526020600482015260166024820152751d985b1d594819185d19481b9bdd081919599a5b995960521b604482015260640161029d565b60018054819060ff60a01b1916600160a01b825b0217905550600154600160a01b900460ff16600581111561036d5761036d610c0f565b6004546002546003546040519081526001600160a01b039283169290911690600080516020610d0a8339815191529060200160405180910390a450600154600160a01b900460ff1690565b6004546001600160a01b0316331480156103ee575060018054600160a01b900460ff1660058111156103ec576103ec610c0f565b145b1561040d57600180546003919060ff60a01b1916600160a01b8361034a565b60405162461bcd60e51b815260206004820152603360248201527f7468652074726164652063616e6e6f7420626520617070726f76656420696e20604482015272746869732063757272656e742073746174757360681b606482015260840161029d565b6002600154600160a01b900460ff16600581111561049157610491610c0f565b036104d75760405162461bcd60e51b8152602060048201526016602482015275151c98591948185b1c9958591e481c995a9958dd195960521b604482015260640161029d565b6002546001600160a01b03163314801561050f57506004600154600160a01b900460ff16600581111561050c5761050c610c0f565b14155b1561058957600180546002919060ff60a01b1916600160a01b835b0217905550600154600160a01b900460ff16600581111561054d5761054d610c0f565b6004546002546003546040519081526001600160a01b039283169290911690600080516020610d0a8339815191529060200160405180910390a4565b6004546001600160a01b0316331480156105e6575060018054600160a01b900460ff1660058111156105bd576105bd610c0f565b14806105e657506003600154600160a01b900460ff1660058111156105e4576105e4610c0f565b145b1561060557600180546002919060ff60a01b1916600160a01b8361052a565b60405162461bcd60e51b815260206004820152603360248201527f7468652074726164652063616e6e6f742062652072656a656374656420696e20604482015272746869732063757272656e742073746174757360681b606482015260840161029d565b6000610673610bb6565b6002546001600160a01b031633146106eb5760405162461bcd60e51b815260206004820152603560248201527f4f6e6c79207468652073656c6c65722063616e20636f6e6669726d20746865206044820152747061796d656e74206f6e207468697320747261646560581b606482015260840161029d565b6003600154600160a01b900460ff16600581111561070b5761070b610c0f565b1461076f5760405162461bcd60e51b815260206004820152602e60248201527f546865207472616465206d75737420626520616363657074656420627920746860448201526d65206275796572206265666f726560901b606482015260840161029d565b60018054600160a21b60ff60a01b19821617909155600254600480546003546040516323b872dd60e01b81526001600160a01b03948516938101939093529083166024830152604482015260009291909116906323b872dd906064016020604051808303816000875af11580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e9190610ce0565b90508061085d5760405162461bcd60e51b815260206004820152601760248201527f746865207472616e7366657220686173206661696c6564000000000000000000604482015260640161029d565b600154600160a01b900460ff16600581111561087b5761087b610c0f565b6004546002546003546040519081526001600160a01b039283169290911690600080516020610d0a8339815191529060200160405180910390a460019150506108c46001600055565b90565b6002546001600160a01b0316331461092f5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207468652073656c6c65722063616e20757064617465207468697320604482015264747261646560d81b606482015260840161029d565b6000600154600160a01b900460ff16600581111561094f5761094f610c0f565b146109bb5760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f74206368616e6765207468652074726164652064657461696c7320604482015275756e6c65737320696e2064726166742073746174757360501b606482015260840161029d565b600154602082015160405163c41251a160e01b81526001600160a01b03918216600482015291169063c41251a190602401602060405180830381865afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190610ce0565b610a9f5760405162461bcd60e51b815260206004820152603760248201527f4275796572206d75737420626520612076616c696420696e766573746f72206560448201527f76656e206f6e206368616e67696e672064657461696c73000000000000000000606482015260840161029d565b80516003556020810151600480546001600160a01b0319166001600160a01b039092169190911790556040810151600590815560608201516006556080820151600755600154600160a01b900460ff1690811115610aff57610aff610c0f565b60208281015160025484516040519081526001600160a01b03928316939290911691600080516020610d0a833981519152910160405180910390a450565b610b786040518060a001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b506040805160a08101825260035481526004546001600160a01b03166020820152600554918101919091526006546060820152600754608082015290565b600260005403610c085760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161029d565b6002600055565b634e487b7160e01b600052602160045260246000fd5b6020810160068310610c4757634e487b7160e01b600052602160045260246000fd5b91905290565b600060a08284031215610c5f57600080fd5b60405160a0810181811067ffffffffffffffff82111715610c9057634e487b7160e01b600052604160045260246000fd5b6040528235815260208301356001600160a01b0381168114610cb157600080fd5b806020830152506040830135604082015260608301356060820152608083013560808201528091505092915050565b600060208284031215610cf257600080fd5b81518015158114610d0257600080fd5b939250505056feb04efa95c2e317d8afba4237350a971f1ce59ef6fbbf2eb3f1a7e3f3f106a8f4a2646970667358221220dfb20c66f99d29f8096eb95129e7979b45b05c5d03d3ef799d1aa7349532be2c64736f6c63430008130033";

type BilateralTradeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BilateralTradeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BilateralTrade__factory extends ContractFactory {
  constructor(...args: BilateralTradeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _register: AddressLike,
    _buyer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_register, _buyer, overrides || {});
  }
  override deploy(
    _register: AddressLike,
    _buyer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_register, _buyer, overrides || {}) as Promise<
      BilateralTrade & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BilateralTrade__factory {
    return super.connect(runner) as BilateralTrade__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BilateralTradeInterface {
    return new Interface(_abi) as BilateralTradeInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BilateralTrade {
    return new Contract(address, _abi, runner) as unknown as BilateralTrade;
  }
}
