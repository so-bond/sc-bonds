/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Snapshot__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BilateralTrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BilateralTrade__factory>;
    getContractFactory(
      name: "Coupon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Coupon__factory>;
    getContractFactory(
      name: "CouponSnapshotManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CouponSnapshotManagement__factory>;
    getContractFactory(
      name: "IBilateralTrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBilateralTrade__factory>;
    getContractFactory(
      name: "ICoupon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoupon__factory>;
    getContractFactory(
      name: "IPrimaryIssuance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimaryIssuance__factory>;
    getContractFactory(
      name: "ICouponSnapshotManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICouponSnapshotManagement__factory>;
    getContractFactory(
      name: "IRegister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegister__factory>;
    getContractFactory(
      name: "IRegisterRoleManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegisterRoleManagement__factory>;
    getContractFactory(
      name: "ISmartContractAccessManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISmartContractAccessManagement__factory>;
    getContractFactory(
      name: "IRegisterMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegisterMetadata__factory>;
    getContractFactory(
      name: "ITrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITrade__factory>;
    getContractFactory(
      name: "PrimaryIssuance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimaryIssuance__factory>;
    getContractFactory(
      name: "Redemption",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Redemption__factory>;
    getContractFactory(
      name: "Register",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Register__factory>;
    getContractFactory(
      name: "RegisterRoleManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegisterRoleManagement__factory>;
    getContractFactory(
      name: "SmartContractAccessManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartContractAccessManagement__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Snapshot",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Snapshot>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BilateralTrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BilateralTrade>;
    getContractAt(
      name: "Coupon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Coupon>;
    getContractAt(
      name: "CouponSnapshotManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CouponSnapshotManagement>;
    getContractAt(
      name: "IBilateralTrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBilateralTrade>;
    getContractAt(
      name: "ICoupon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoupon>;
    getContractAt(
      name: "IPrimaryIssuance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrimaryIssuance>;
    getContractAt(
      name: "ICouponSnapshotManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICouponSnapshotManagement>;
    getContractAt(
      name: "IRegister",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegister>;
    getContractAt(
      name: "IRegisterRoleManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegisterRoleManagement>;
    getContractAt(
      name: "ISmartContractAccessManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISmartContractAccessManagement>;
    getContractAt(
      name: "IRegisterMetadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegisterMetadata>;
    getContractAt(
      name: "ITrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITrade>;
    getContractAt(
      name: "PrimaryIssuance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimaryIssuance>;
    getContractAt(
      name: "Redemption",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Redemption>;
    getContractAt(
      name: "Register",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Register>;
    getContractAt(
      name: "RegisterRoleManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RegisterRoleManagement>;
    getContractAt(
      name: "SmartContractAccessManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartContractAccessManagement>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Snapshot>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "BilateralTrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BilateralTrade>;
    deployContract(
      name: "Coupon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Coupon>;
    deployContract(
      name: "CouponSnapshotManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CouponSnapshotManagement>;
    deployContract(
      name: "IBilateralTrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBilateralTrade>;
    deployContract(
      name: "ICoupon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoupon>;
    deployContract(
      name: "IPrimaryIssuance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimaryIssuance>;
    deployContract(
      name: "ICouponSnapshotManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICouponSnapshotManagement>;
    deployContract(
      name: "IRegister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegister>;
    deployContract(
      name: "IRegisterRoleManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegisterRoleManagement>;
    deployContract(
      name: "ISmartContractAccessManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISmartContractAccessManagement>;
    deployContract(
      name: "IRegisterMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegisterMetadata>;
    deployContract(
      name: "ITrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITrade>;
    deployContract(
      name: "PrimaryIssuance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimaryIssuance>;
    deployContract(
      name: "Redemption",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Redemption>;
    deployContract(
      name: "Register",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Register>;
    deployContract(
      name: "RegisterRoleManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegisterRoleManagement>;
    deployContract(
      name: "SmartContractAccessManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartContractAccessManagement>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "AccessControlEnumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IAccessControlEnumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Snapshot",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Snapshot>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "BilateralTrade",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BilateralTrade>;
    deployContract(
      name: "Coupon",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Coupon>;
    deployContract(
      name: "CouponSnapshotManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CouponSnapshotManagement>;
    deployContract(
      name: "IBilateralTrade",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBilateralTrade>;
    deployContract(
      name: "ICoupon",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoupon>;
    deployContract(
      name: "IPrimaryIssuance",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrimaryIssuance>;
    deployContract(
      name: "ICouponSnapshotManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICouponSnapshotManagement>;
    deployContract(
      name: "IRegister",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegister>;
    deployContract(
      name: "IRegisterRoleManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegisterRoleManagement>;
    deployContract(
      name: "ISmartContractAccessManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISmartContractAccessManagement>;
    deployContract(
      name: "IRegisterMetadata",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegisterMetadata>;
    deployContract(
      name: "ITrade",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITrade>;
    deployContract(
      name: "PrimaryIssuance",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimaryIssuance>;
    deployContract(
      name: "Redemption",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Redemption>;
    deployContract(
      name: "Register",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Register>;
    deployContract(
      name: "RegisterRoleManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegisterRoleManagement>;
    deployContract(
      name: "SmartContractAccessManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartContractAccessManagement>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.Contract>;
  }
}
