/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RegisterRoleManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BND_ROLE"
      | "CAK_ROLE"
      | "CST_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "PAY_ROLE"
      | "_addressForNewAdmin"
      | "_firstVoterForNewAdmin"
      | "_votesForNewAdmin"
      | "changeAdminRole"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantBndRole"
      | "grantCakRole"
      | "grantCstRole"
      | "grantPayRole"
      | "grantRole"
      | "hasRole"
      | "isBnD"
      | "isCAK"
      | "isCustodian"
      | "isPay"
      | "registerAdmin"
      | "renounceRole"
      | "revokeBndRole"
      | "revokeCakRole"
      | "revokeCstRole"
      | "revokePayRole"
      | "revokeRole"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BND_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "CAK_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "CST_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PAY_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_addressForNewAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_firstVoterForNewAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_votesForNewAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantBndRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCakRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCstRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPayRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isBnD", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "isCAK", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isCustodian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isPay", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "registerAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBndRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCakRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCstRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePayRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "BND_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CAK_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CST_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PAY_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_addressForNewAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_firstVoterForNewAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_votesForNewAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantBndRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCakRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCstRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPayRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBnD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCAK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCustodian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeBndRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCakRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCstRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePayRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [_addressForNewAdmin: AddressLike];
  export type OutputTuple = [_addressForNewAdmin: string];
  export interface OutputObject {
    _addressForNewAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RegisterRoleManagement extends BaseContract {
  connect(runner?: ContractRunner | null): RegisterRoleManagement;
  waitForDeployment(): Promise<this>;

  interface: RegisterRoleManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BND_ROLE: TypedContractMethod<[], [string], "view">;

  CAK_ROLE: TypedContractMethod<[], [string], "view">;

  CST_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PAY_ROLE: TypedContractMethod<[], [string], "view">;

  _addressForNewAdmin: TypedContractMethod<[], [string], "view">;

  _firstVoterForNewAdmin: TypedContractMethod<[], [string], "view">;

  _votesForNewAdmin: TypedContractMethod<[], [bigint], "view">;

  changeAdminRole: TypedContractMethod<
    [account_: AddressLike],
    [void],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantBndRole: TypedContractMethod<
    [bndAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCakRole: TypedContractMethod<
    [cakAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCstRole: TypedContractMethod<
    [cstAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  grantPayRole: TypedContractMethod<
    [payAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isBnD: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isCAK: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isCustodian: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isPay: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  registerAdmin: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeBndRole: TypedContractMethod<
    [bndAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCakRole: TypedContractMethod<
    [cakAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCstRole: TypedContractMethod<
    [cstAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  revokePayRole: TypedContractMethod<
    [payAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BND_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAK_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CST_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_addressForNewAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_firstVoterForNewAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_votesForNewAdmin"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeAdminRole"
  ): TypedContractMethod<[account_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantBndRole"
  ): TypedContractMethod<[bndAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCakRole"
  ): TypedContractMethod<[cakAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCstRole"
  ): TypedContractMethod<[cstAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantPayRole"
  ): TypedContractMethod<[payAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBnD"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCAK"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCustodian"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPay"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeBndRole"
  ): TypedContractMethod<[bndAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCakRole"
  ): TypedContractMethod<[cakAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCstRole"
  ): TypedContractMethod<[cstAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePayRole"
  ): TypedContractMethod<[payAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
