/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IRegisterMetadata {
  export type BondDataStruct = {
    name: string;
    isin: string;
    expectedSupply: BigNumberish;
    currency: BytesLike;
    unitValue: BigNumberish;
    couponRate: BigNumberish;
    creationDate: BigNumberish;
    issuanceDate: BigNumberish;
    maturityDate: BigNumberish;
    couponDates: BigNumberish[];
    cutOffTime: BigNumberish;
  };

  export type BondDataStructOutput = [
    name: string,
    isin: string,
    expectedSupply: bigint,
    currency: string,
    unitValue: bigint,
    couponRate: bigint,
    creationDate: bigint,
    issuanceDate: bigint,
    maturityDate: bigint,
    couponDates: bigint[],
    cutOffTime: bigint
  ] & {
    name: string;
    isin: string;
    expectedSupply: bigint;
    currency: string;
    unitValue: bigint;
    couponRate: bigint;
    creationDate: bigint;
    issuanceDate: bigint;
    maturityDate: bigint;
    couponDates: bigint[];
    cutOffTime: bigint;
  };
}

export interface IRegisterMetadataInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCouponDate"
      | "delCouponDate"
      | "getBondCouponRate"
      | "getBondData"
      | "getBondUnitValue"
      | "getCreationDate"
      | "getIssuanceDate"
      | "setBondData"
      | "setCreationDate"
      | "setCurrency"
      | "setExpectedSupply"
      | "setIsinSymbol"
      | "setIssuanceDate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCouponDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delCouponDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondCouponRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondUnitValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuanceDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBondData",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreationDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpectedSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsinSymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIssuanceDate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCouponDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delCouponDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondCouponRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondUnitValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuanceDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpectedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsinSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIssuanceDate",
    data: BytesLike
  ): Result;
}

export interface IRegisterMetadata extends BaseContract {
  connect(runner?: ContractRunner | null): IRegisterMetadata;
  waitForDeployment(): Promise<this>;

  interface: IRegisterMetadataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCouponDate: TypedContractMethod<
    [date: BigNumberish],
    [void],
    "nonpayable"
  >;

  delCouponDate: TypedContractMethod<
    [date: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBondCouponRate: TypedContractMethod<[], [bigint], "view">;

  getBondData: TypedContractMethod<
    [],
    [IRegisterMetadata.BondDataStructOutput],
    "view"
  >;

  getBondUnitValue: TypedContractMethod<[], [bigint], "view">;

  getCreationDate: TypedContractMethod<[], [bigint], "view">;

  getIssuanceDate: TypedContractMethod<[], [bigint], "view">;

  setBondData: TypedContractMethod<
    [
      name_: string,
      expectedSupply_: BigNumberish,
      currency_: BytesLike,
      unitVal_: BigNumberish,
      couponRate_: BigNumberish,
      issuanceDate_: BigNumberish,
      maturityDate_: BigNumberish,
      cutOffTime_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setCreationDate: TypedContractMethod<
    [creationDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCurrency: TypedContractMethod<[currency: BytesLike], [void], "nonpayable">;

  setExpectedSupply: TypedContractMethod<
    [expectedSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIsinSymbol: TypedContractMethod<
    [isinSymbol: string],
    [void],
    "nonpayable"
  >;

  setIssuanceDate: TypedContractMethod<
    [issuanceDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCouponDate"
  ): TypedContractMethod<[date: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delCouponDate"
  ): TypedContractMethod<[date: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBondCouponRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBondData"
  ): TypedContractMethod<[], [IRegisterMetadata.BondDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getBondUnitValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCreationDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIssuanceDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBondData"
  ): TypedContractMethod<
    [
      name_: string,
      expectedSupply_: BigNumberish,
      currency_: BytesLike,
      unitVal_: BigNumberish,
      couponRate_: BigNumberish,
      issuanceDate_: BigNumberish,
      maturityDate_: BigNumberish,
      cutOffTime_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreationDate"
  ): TypedContractMethod<[creationDate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurrency"
  ): TypedContractMethod<[currency: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExpectedSupply"
  ): TypedContractMethod<[expectedSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsinSymbol"
  ): TypedContractMethod<[isinSymbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIssuanceDate"
  ): TypedContractMethod<[issuanceDate: BigNumberish], [void], "nonpayable">;

  filters: {};
}
